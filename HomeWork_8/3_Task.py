# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
#
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
#
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
# очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class MyValueError(Exception):
    def __init__(self, text):
        self.text = text

    @classmethod
    def raise_me(cls, text):
        raise MyValueError(text)

    @classmethod
    def is_contain_numbers(cls, data):
        [MyValueError.raise_me(i) for i in data if not i.isnumeric()]

    def __str__(self):
        return self.text


result = []
while True:
    inp = input("Введите число для добавления в список или 'stop' для выхода: ")
    if inp == 'stop':
        print(result)
        break
    else:
        result.append(inp)
        try:
            MyValueError.is_contain_numbers(result)
        except MyValueError as e:
            print(f"Введены некоректные данные: {e.text}")
            result.pop(-1)
        print(result)
