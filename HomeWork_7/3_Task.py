# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
#       вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
#       Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
#       (не целочисленное) деление клеток, соответственно.
#       В методе деления должно осуществляться округление значения до целого числа.
#
# Сложение.Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
#
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
#
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
#
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
#
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cells:
    def __init__(self, cells_count):
        if cells_count < 0:
            raise AttributeError
        else:
            self.cellsCount = cells_count

    def __add__(self, other):
        return Cells(self.cellsCount + other.cellsCount)

    def __sub__(self, other):
        if self.cellsCount > other.cellsCount:
            return Cells(self.cellsCount - other.cellsCount)
        else:
            print("ERROR: Количество ячеек во второй клетке больше или равно количеству ячеек первой клетки")

    def __mul__(self, other):
        return Cells(self.cellsCount * other.cellsCount)

    def __truediv__(self, other):
        return Cells(self.cellsCount // other.cellsCount)

    def make_order(self, row_length):
        if row_length <= 0:
            raise AttributeError
        cells = self.cellsCount
        result = ''

        while cells > 0:
            result += '*'*row_length+'\n' if cells >= row_length else '*'*cells+'\n'
            cells -= row_length
        return result

    def __str__(self):
        return f'Я клетка!, ячеек: {self.cellsCount}'


print(Cells(10) + Cells(5))
print(Cells(10) - Cells(5))
print(Cells(10) - Cells(15))
print(Cells(10) * Cells(5))
print(Cells(10) / Cells(3))

print(Cells(19).make_order(10))

print(Cells(8).make_order(4))

print(Cells(0).make_order(4))
